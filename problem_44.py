import cProfile
from operator import attrgetter


##Triangle, pentagonal, and hexagonal numbers are generated by the
##following formulae:
##
##Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
##Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
##Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
##It can be verified that T285 = P165 = H143 = 40755.
##
##Find the next triangle number that is also pentagonal and hexagonal.


# 1703022 function calls in 0.953 seconds

class Number:
    def __init__(self):
        self.count = 1
        self._value = 1

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, val):
        self._value = int(val)

    def __repr__(self):
        return self.value

    def __str__(self):
        return str(self.value)

    def __eq__(self, other):
        if type(other) == int:
            return self.value == other
        if type(other) == type(self):
            return self.value == other.value
        
    def __lt__(self, other):
        if type(other) == int:
            return self.value < other
        if type(other) == type(self):
            return self.value < other.value
        
    def __gt__(self, other):
        if type(other) == int:
            return self.value > other
        if type(other) == type(self):
            return self.value > other.value

class Triangle(Number):
    def next(self):
        self.count += 1
        self.value = (self.count*(self.count+1))/2

    def __str__(self):
        return f'T{self.count}: {self.value}' 

class Pentagonal(Number):
    def next(self):
        self.count += 1
        self.value = (self.count*((3*self.count)-1))/2

    def __str__(self):
        return f'P{self.count}: {self.value}' 

class Hexagonal(Number):
    def next(self):
        self.count += 1
        self.value = (self.count*((2*self.count)-1))

    def __str__(self):
        return f'H{self.count}: {self.value}' 

def prob_44():
    t = Triangle()
    p = Pentagonal()
    h = Hexagonal()

    numbers = [t, p, h]

    while True:
        # print(f"T{t.count}: {t.value}, P{p.count}: {p.value}, H{h.count}: {h.value}")
        #if numbers[0].value == numbers[1].value == numbers[2].value and not numbers[0] == 1:
        if numbers[0].value == numbers[1].value == numbers[2].value and not numbers[0] == 1:
            [print(x) for x in numbers]
            if not numbers[0] < 41000:
                break
        if min(numbers, key=attrgetter('value')) == numbers[0]:
            t.next()
        elif min(numbers, key=attrgetter('value')) == numbers[1]:
            p.next()
        elif min(numbers, key=attrgetter('value')) == numbers[2]:
            h.next()


cProfile.run('prob_44()')
## 230117 function calls in 506.626 seconds

##def triangle_numbers():
##    count = 0
##    while True:
##        count += 1
##        next_number = (count*(count+1))/2
##        yield int(next_number)
##
##def pentagonal_numbers():
##    count = 0
##    while True:
##        count += 1
##        next_number = (count*((3*count)-1))/2
##        yield int(next_number)
##
##def hexagonal_numbers():
##    count = 0
##    while True:
##        count += 1
##        next_number = (count*((2*count)-1))
##        yield int(next_number)
##
##def problem_44():
##    tri = triangle_numbers()
##    pen = pentagonal_numbers()
##    hexa = hexagonal_numbers()
##    cur_tri = next(tri)
##    cur_pen = next(pen)
##    cur_hexa = next(hexa)
##    count = 2
##    while True:
##        if cur_tri == cur_pen == cur_hexa == count:
##            #print(count)
##            if count > 40755:
##                break
##        if cur_hexa < count:
##            cur_hexa = next(hexa)
##        if cur_pen < count:
##            cur_pen = next(pen)
##        if cur_tri < count:
##            cur_tri = next(tri)
##        if cur_hexa >= count and cur_pen >= count and cur_tri >= count:
##            count += 1
##            
##cProfile.run('problem_44()')
